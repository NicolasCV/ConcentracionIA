knitr::opts_chunk$set(echo = FALSE)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = FALSE)
M=read.csv("ds_salaries.csv")
work_year = M$work_year
table(work_year) #NUMERICA DISCRETA
job_title = M$job_title
table(job_title) #CUALITATIVA NOMINAL
employment_type = M$employment_type
table(employment_type) #CUALITATIVA NOMINAL
remote_ratio = M$remote_ratio
table(remote_ratio) #CUALITATIVA NOMINAL
#EN VEZ DE UTILIZAR ESTO
#salary = M$salary
#salary_currency = M$salary_currency
#UTILIZAREMOS SOLO ESTE
salary_in_usd = M$salary_in_usd #CUANTITATIVA DISCRETA
print(paste('Range ',max(salary_in_usd)-min(salary_in_usd),' / ', 'Variance ',var(salary_in_usd),' / ', 'STD ',sd(salary_in_usd)))
summary(salary_in_usd)
company_location = M$company_location
table(company_location) #CUALITATIVA NOMINAL
employee_residence = M$employee_residence
table(employee_residence) #CUALITATIVA NOMINAL
company_size = M$company_size
table(company_size) #CUALITATIVA ORDINAL
colSums(is.na(M))
hist(salary_in_usd, col='steelblue', main='Histograma Salarios',breaks=70)
qqnorm(salary_in_usd, main='QQ Plot Salarios')
qqline(salary_in_usd)
library(e1071)
install.packages("e1071")
knitr::opts_chunk$set(echo = FALSE)
M=read.csv("ds_salaries.csv")
work_year = M$work_year
table(work_year) #NUMERICA DISCRETA
job_title = M$job_title
table(job_title) #CUALITATIVA NOMINAL
employment_type = M$employment_type
table(employment_type) #CUALITATIVA NOMINAL
remote_ratio = M$remote_ratio
table(remote_ratio) #CUALITATIVA NOMINAL
#EN VEZ DE UTILIZAR ESTO
#salary = M$salary
#salary_currency = M$salary_currency
#UTILIZAREMOS SOLO ESTE
salary_in_usd = M$salary_in_usd #CUANTITATIVA DISCRETA
print(paste('Range ',max(salary_in_usd)-min(salary_in_usd),' / ', 'Variance ',var(salary_in_usd),' / ', 'STD ',sd(salary_in_usd)))
summary(salary_in_usd)
company_location = M$company_location
table(company_location) #CUALITATIVA NOMINAL
employee_residence = M$employee_residence
table(employee_residence) #CUALITATIVA NOMINAL
company_size = M$company_size
table(company_size) #CUALITATIVA ORDINAL
colSums(is.na(M))
hist(salary_in_usd, col='steelblue', main='Histograma Salarios',breaks=70)
qqnorm(salary_in_usd, main='QQ Plot Salarios')
qqline(salary_in_usd)
library(e1071)
skewness(salary_in_usd)
boxplot(salary_in_usd, horizontal = TRUE)
Q <- quantile(salary_in_usd, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(salary_in_usd)
#Utilizamos 1.5 para datos atipicos + extremos, se utiliza 3 para solo quitar los datos extremos,
up <-  Q[2]+1.5*iqr # Upper Range
low <- Q[1]-1.5*iqr # Lower Range
#Respaldamos una matriz con outliers
matrixConOutliers <- M
M<- subset(M, (M$salary_in_usd > low) & (M$salary_in_usd < up))
salary_in_usd <- M$salary_in_usd
hist(salary_in_usd, col='steelblue', main='Histograma Salarios',breaks=70)
M$contract <- ifelse(M$employment_type == 'CT', 1, 0)
M$freelance <- ifelse(M$employment_type == 'FL', 1, 0)
M$fullTime <- ifelse(M$employment_type == 'FT', 1, 0)
M$partTime <- ifelse(M$employment_type == 'PT', 1, 0)
M$entry <- ifelse(M$experience_level == 'EN', 1, 0)
M$midlevel <- ifelse(M$experience_level == 'MI', 1, 0)
M$senior <- ifelse(M$experience_level == 'SE', 1, 0)
M$executive <- ifelse(M$experience_level == 'EX', 1, 0)
M$fullRemote <- ifelse(M$remote_ratio == 100, 1, 0)
M$partialRemote <- ifelse(M$remote_ratio == 50, 1, 0)
M$noRemote <- ifelse(M$remote_ratio == 0, 1, 0)
M$largeCompany <- ifelse(M$company_size == 'L', 1, 0)
M$mediumCompany <- ifelse(M$company_size == 'M', 1, 0)
M$smallCompany <- ifelse(M$company_size == 'S', 1, 0)
getError <- function(X, alfa) {
n = length(X)
media = mean(X) #Igual podriamos utilizar una media hipotesis como miu, en este caso usaremos la misma que la muestra
sigma = sd(X)
ErrorEst = sigma/sqrt(n)
E = abs(qnorm(alfa/2))*ErrorEst
return(E)
}
printLimits <- function(X, alfa) {
E <- getError(X, alfa)
media <- mean(X)
lowerLimit =  media- E
upperLimit = media + E
print(paste("Intervalo de ", floor((1-alfa)*100),"% de confianza:"))
print(paste("Lower Limit: ", floor(lowerLimit)))
print(paste("Average: ", floor(media)))
print(paste("Upper Limit: ", floor(upperLimit)))
return(c(lowerLimit,media,upperLimit))
}
library("RColorBrewer")
plotInt <- function(maxIntervals, main_, labels_, xmin, xmax) {
plot(0, ylim=c(0,maxIntervals+1), xlim=c(xmin-100,xmax+100),yaxt="n", ylab="", main=main_)
axis(2, at=c(1:maxIntervals), labels=labels_)
}
addInt <- function(info, n_) {
#Para insertar los intervalos [Ai,Bi], con Ai y Bi son los lÃ­mites inferior y superior del intervalo i respectivamente:
arrows(info[1], n_, info[3], n_, angle=90, code=3, length = 0.1, lwd = 2, col=brewer.pal(n = 10, name = "Spectral")[n_])
#Para dibujar la media dentro del  intervalo (insertar un punto), donde mi es la media del intervalo i:
points(info[2], n_, pch=19, cex=1.1, col=brewer.pal(n = 10, name = "Spectral")[n_])
}
res <- printLimits(salary_in_usd, 0.01)
plotInt(1, "CI for Salaries, 99% confidence" ,c("Salarios en USD"), min(res),max(res))
addInt(res, 1)
getStats <- function(subset, title) {
print(paste(title,':'))
print(paste('N datos: ',length(subset),' / ','Range ',max(currYearSalary)-min(subset),' / ', 'Variance ',var(subset),' / ', 'STD ',sd(subset)))
print(summary(subset))
writeLines("\n")
printLimits(subset, 0.01)
writeLines("\n\n")
}
X<-split(M, M$work_year)
years = names(X)
plotInt(length(years), "CI for Salaries by Year, 99% confidence" ,c(years), min(salary_in_usd),max(salary_in_usd))
counter <- 1
for (year in years){
currYear<-X[[year]]
currYearSalary = currYear$salary_in_usd
getStats(currYearSalary,paste('Year ',year))
res <- printLimits(currYearSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
X<-split(M, M$company_size)
sizes = names(X)
plotInt(length(sizes), "CI for Salaries by Company Size, 99% confidence" ,c(sizes), min(salary_in_usd),max(salary_in_usd))
counter <- 1
for (size in sizes){
currSize<-X[[size]]
currSizeSalary = currSize$salary_in_usd
getStats(currSizeSalary,paste('Size ',size))
res <- printLimits(currSizeSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
dividedBySize<-split(matrixConOutliers, matrixConOutliers$company_size)
summary(dividedBySize$`L`$salary_in_usd)
X<-split(dividedBySize$`L`, dividedBySize$`L`$experience_level)
niveles = names(X)
plotInt(length(niveles), "CI for Salaries Large Company, by XP Level, 99% confidence" ,c(niveles), min(dividedBySize$`L`$salary_in_usd),max(dividedBySize$`L`$salary_in_usd))
counter <- 1
for (nivelExperiencia in niveles){
currExperiencia<-X[[nivelExperiencia]]
currXPSalary = currExperiencia$salary_in_usd
getStats(currXPSalary,paste('Nivel de Experiencia en Empresa Grande: ',nivelExperiencia))
res <- printLimits(currXPSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
X<-split(dividedBySize$`M`, dividedBySize$`M`$experience_level)
niveles = names(X)
#Usaremos los mismos xlims que en la empresa grande para observar la diferencia
plotInt(length(niveles), "CI for Salaries Medium Company, by XP Level, 99% confidence" ,c(niveles), min(dividedBySize$`L`$salary_in_usd),max(dividedBySize$`L`$salary_in_usd))
counter <- 1
for (nivelExperiencia in niveles){
currExperiencia<-X[[nivelExperiencia]]
currXPSalary = currExperiencia$salary_in_usd
getStats(currXPSalary,paste('Nivel de Experiencia en Empresa Grande: ',nivelExperiencia))
res <- printLimits(currXPSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
X<-split(M, M$company_location)
#Check all which have more than 30 data points
minDatos = 30
paises = names(X)
paisesFiltrados <- vector()
#Filtramos los paises
for (pais in paises){
currPais<-X[[pais]]
currPSalary = currPais$salary_in_usd
if (length(currPSalary) >= minDatos) {
paisesFiltrados <- c(paisesFiltrados, pais)
}
}
plotInt(length(paisesFiltrados), "CI for Salaries by Country, 99% confidence" ,c(paisesFiltrados), min(M$salary_in_usd),max(M$salary_in_usd))
counter <- 1
for (paisFiltrado in paisesFiltrados){
currPais<-X[[paisFiltrado]]
currPSalary = currPais$salary_in_usd
getStats(currPSalary,paste('Pais ',pais))
res <- printLimits(currPSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
X<-split(M, M$remote_ratio)
typesOfRemote = names(X)
plotInt(length(typesOfRemote), "CI for Salaries by Remote %, 99% confidence" ,c(typesOfRemote), min(salary_in_usd),max(salary_in_usd))
counter <- 1
for (typeOfRemote in typesOfRemote){
currRemote<-X[[typeOfRemote]]
currRemoteSalary = currRemote$salary_in_usd
print(paste("% Remoto ",typeOfRemote,": "))
print(table(currRemote$experience_level))
res <- printLimits(currRemoteSalary, 0.01)
addInt(res, counter)
counter <- counter + 1
}
boxplot(salary_in_usd~company_size)
boxplot(M$salary_in_usd~M$company_size)
A<-aov(M$salary_in_usd~M$company_size)
summary(A)
I = TukeyHSD(aov(mediaMercurio ~ edad))
I = TukeyHSD(aov(A)
plot(I)
I = TukeyHSD(A)
plot(I)
boxplot(M$salary_in_usd~M$company_location)
A<-aov(M$salary_in_usd~M$company_location)
summary(A)
I = TukeyHSD(A)
plot(I)
boxplot(M$salary_in_usd~paisFiltrado)
boxplot(M$salary_in_usd~M$remote_ratio)
A<-aov(M$salary_in_usd~M$remote_ratio)
summary(A)
I = TukeyHSD(A)
boxplot(M$salary_in_usd~M$remote_ratio)
A<-aov(M$salary_in_usd~M$remote_ratio)
summary(A)
I = TukeyHSD(A)
A<-aov(M$salary_in_usd~data.frame(lapply(M$remote_ratio, as.character), stringsAsFactors=FALSE))
A<-aov(M$salary_in_usd~ lapply(M$remote_ratio, as.character))
A<-aov(M$salary_in_usd~ apply(M$remote_ratio, as.character))
A<-aov(M$salary_in_usd~ lapply(M$remote_ratio, as.character))
rratios[] <- lapply(M$remote_ratio, as.character)
rratios[] <- lapply(M$remote_ratio, as.character)
rratios[] <- lapply(M$remote_ratio, as.character)
rratios[] <- lapply(M$remote_ratio, as.character)
rratios[] <- lapply(M$remote_ratio, as.character)
rratios[] <- lapply(M$remote_ratio, as.character)
rratios <- apply(M$remote_ratio,2,as.character)
rratios <- apply(M$remote_ratio,as.character)
rratios <- apply(M$remote_ratio,1,as.character)
rratios <- sapply(M$remote_ratio,as.character)
A<-aov(M$salary_in_usd~ rratios)
summary(A)
I = TukeyHSD(A)
plot(I)
boxplot(M$salary_in_usd~M$work_year)
A<-aov(M$salary_in_usd~M$work_year)
summary(A)
A<-aov(M$salary_in_usd~M$work_year)
summary(A)
I = TukeyHSD(A)
years <- sapply(M$work_year, as.character)
A<-aov(M$salary_in_usd~years)
summary(A)
I = TukeyHSD(A)
plot(I)
